<?php

namespace PackBot;

use Longman\TelegramBot\Commands\Command;
use Longman\TelegramBot\Conversation;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Entities\Keyboard;
use Longman\TelegramBot\Entities\ServerResponse;
use Longman\TelegramBot\Request;

final class IndexPossibilityCheckScreen extends Screen implements ScreenInterface
{
    protected Command $command;

    protected Keyboard|InlineKeyboard $keyboard;

    protected Keyboard $afterKeyboard;

    protected Text $text;

    protected Conversation $conversation;

    protected string $screenName = 'IndexPossibilityCheck';

    protected int $maxDomainsAtOnce;

    public function __construct(Command $command)
    {
        parent::__construct($command);
        $this->prepareKeyboard();
        $this->prepareAfterKeyboard();
        $this->command          = $command;
        $this->text             = new Text();
        $this->maxDomainsAtOnce = Environment::var('tools_settings')['IndexPossibilityCheckTool']['maxDomainsAtOnce'];
    }

    public function executeScreen(): ServerResponse
    {
        return $this->startConversation();
    }

    public function executeCallback(string $callback): ServerResponse
    {

        $this->loadConversation();
        $this->conversation->stop();

        switch($callback) {
            default:
                error_log('An attempt to execute undefined callback for screen ' . $this->screenName . ': ' . $callback);

                return $this->sendSomethingWrong();
            case 'back':
                $screen = new SeoChecksScreen($this->command);
                $screen->executeScreen();

                return $this->command->getCallbackQuery()->answer();
            case 'anotherCheck':
                $screen = new self($this->command);
                $screen->executeScreen();

                return $this->command->getCallbackQuery()->answer();
            case 'saveReport':
                $screen = new MainMenuScreen($this->command);
                $screen
                ->blockSideExecute()
                ->executeScreen();

                return $this->command->getCallbackQuery()->answer();
        }
    }

    protected function startConversation()
    {

        if (!isset($this->conversation)) {
            $this->conversation = new Conversation($this->getChatID(), $this->getUserID(), 'conversationHandler');
        }

        $conversation = &$this->conversation;
        $notes        = &$conversation->notes;
        !is_array($notes) && $notes
                          = [];

        $state               = $notes['state'] ?? 0;
        $notes['screenName'] = $this->screenName;

        //State machine
        switch ($state) {
            case 0:
                $notes['state'] = 1;
                $conversation->update();

                return $this->maybeSideExecute([
                    '–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
                    '–ò–º–µ–π—Ç–µ –≤ –≤–∏–¥—É, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ * –≤ robots.txt, —Ç–∞–∫ —á—Ç–æ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, —è –¥–æ–±–∞–≤–ª—é —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–∑–∂–µ.',
                    $this->text->sprintf('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: %d', $this->maxDomainsAtOnce),
                    '',
                    '–ö–∞–∂–¥—ã–π –¥–æ–º–µ–Ω —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.',
                    '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤</b>',
                    '',
                ], $this->keyboard, true, [
                    'parse_mode' => 'HTML',
                ]);
            case 1:
                return $this->proccessCheckRequest($conversation);
            default:
                return $this->sendSomethingWrong();
        }
    }

    protected function forceReplyKeyboard()
    {
        return Keyboard::forceReply();
    }

    protected function prepareKeyboard()
    {

        $this->keyboard = new InlineKeyboard([
            [
                'text'          => $this->text->e('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'),
                'callback_data' => $this->screenName . '_back',
            ],
        ]);
    }

    protected function prepareAfterKeyboard()
    {
        $this->afterKeyboard = new MultiRowInlineKeyboard([
            [
                'text'          => $this->text->e('–ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞'),
                'callback_data' => $this->screenName . '_anotherCheck',
            ],
            [
                'text'          => $this->text->e('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç'),
                'callback_data' => $this->screenName . '_saveReport',
            ],
            [
                'text'          => $this->text->e('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'),
                'callback_data' => $this->screenName . '_back',
            ],
        ], 2);
    }

    private function proccessCheckRequest($conversation)
    {

        $message      = $this->getText();
        $inputDomains = array_unique(explode(PHP_EOL, $message));

        if (count($inputDomains) > $this->maxDomainsAtOnce) {
            return $this->tryToSendMessage($this->text->concatEOL(
                $this->text->sprintf('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: %d. –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ %d –¥–æ–º–µ–Ω–æ–≤.', $this->maxDomainsAtOnce, count($inputDomains)),
                '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            ));
        }

        foreach ($inputDomains as $key => $domain) {
            $inputDomains[$key] = trim($domain);

            if (empty($inputDomains[$key])) {
                unset($inputDomains[$key]);
            }

            if (Url::isValid($inputDomains[$key])) {
                $inputDomains[$key] = $inputDomains[$key];
            } else {
                $this->tryToSendMessage(implode('', [
                    $this->text->sprintf('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω: %s', Format::prepDisplay($inputDomains[$key], 15)),
                    PHP_EOL,
                    $this->text->e('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'),
                ]));

                return Request::emptyResponse();
            }
        }

        $conversation->stop();

        $response        = $this->tryToSendMessage($this->text->e('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –æ—Ç—á–µ—Ç.'), false);
        $reportMessageID = $response->getResult()->getMessageId();

        try {
            $tool   = new IndexPossibilityCheckTool($inputDomains);
            $result = $tool->getResult();
        } catch (ToolException $e) {
            sleep(1);

            return Request::editMessageText([
                'chat_id'      => $this->isSideExecute() ? $this->command->getCallbackQuery()->getFrom()->getId() : $this->command->getMessage()->getChat()->getId(),
                'message_id'   => $reportMessageID,
                'text'         => $this->text->e('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –æ—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω. –û—à–∏–±–∫–∞:') . ' ' . $e->getMessage(),
                'parse_mode'   => 'HTML',
                'reply_markup' => $this->afterKeyboard,
            ]);
        }

        $report = new Report();

        $report->setTitle('–í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:');

        foreach ($result as $domain => $indexPossibilityResponse) {
            /**
             * @var IndexPossibilityResponse $indexPossibilityResponse
             */
            $report->addBlock([
                '[' . $indexPossibilityResponse->getEffectiveUrl() . ']: ',
                PHP_EOL,
                ($indexPossibilityResponse->isIndexBlocked() ? $this->text->e('üö´') : $this->text->e('‚úÖ ')),
                ($indexPossibilityResponse->isIndexBlocked() ? $this->text->e('–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞') : $this->text->e('–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞')),
                PHP_EOL,
                '–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ robots.txt:',
                ' ',
                ($indexPossibilityResponse->isIndexBlockedByRobots() ? '–î–∞' : '–ù–µ—Ç'),
                PHP_EOL,
                '–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π (–º–µ—Ç–∞-—Ç–µ–≥–∏ –∏–ª–∏ –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞):',
                ' ',
                ($indexPossibilityResponse->isIndexBlockedByPage() ? '–î–∞' : '–ù–µ—Ç'),
            ]);
        }

        Request::editMessageText([
            'chat_id'                  => $this->isSideExecute() ? $this->command->getCallbackQuery()->getFrom()->getId() : $this->command->getMessage()->getChat()->getId(),
            'message_id'               => $reportMessageID,
            'text'                     => $report->getReport(),
            'parse_mode'               => 'HTML',
            'reply_markup'             => $this->afterKeyboard,
            'disable_web_page_preview' => true,
        ]);

        $this->tryToSendTempMessage('–û–¥–∏–Ω –∏–∑ –æ—Ç—á–µ—Ç–æ–≤ –≥–æ—Ç–æ–≤! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —á–∞—Ç.', 2);

        return Request::emptyResponse();
    }
}
